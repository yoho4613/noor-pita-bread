// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
    // url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model admin {
    id       String       @id @default(cuid())
    name     String
    email    String       @unique
    password String
    role     RoleEnumType @default(admin)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String       @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    cart          String[]     @default([])
    watchlist     String[]     @default([])
    purchase      Json?
    address       Json?
    Order         Order[]
    role          RoleEnumType @default(customer)
    Review        Review[]
    createdAt     DateTime     @default(now())
}

enum RoleEnumType {
    customer
    vipCustomer
    admin
    superadmin
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id            String       @id @default(cuid())
    title         String
    type          String
    description   String
    rrp           String
    price         String
    imgUrl        String[]
    attributes    Json?
    delivery      Int?
    stock         Int
    category      Category     @relation(fields: [categoryId], references: [id])
    categoryId    String
    subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
    subcategoryId String?
    Sale          Sale?        @relation(fields: [saleId], references: [id])
    saleId        String?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    review        Review[]
}

model Review {
    id        String   @id @default(cuid())
    comment   String
    star      Int
    product   Product  @relation(fields: [productId], references: [id])
    productId String
    author    User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Sale {
    id       String     @id @default(cuid())
    title    String
    subtitle String?
    start    DateTime
    expire   DateTime
    Products Product[]
    method   SaleMethod
    value    Int
}

enum SaleMethod {
    fixedPrice
    percentDiscount
}

model Category {
    id          String        @id @default(cuid())
    name        String
    subcategory Subcategory[]
    Product     Product[]
}

model Subcategory {
    id         String    @id @default(cuid())
    name       String
    Product    Product[]
    category   Category  @relation(fields: [categoryId], references: [id])
    categoryId String
}

model Banner {
    id          String         @id @default(cuid())
    title       String
    description String
    link        String
    imgUrl      String
    position    BannerPosition @default(homeTop)
}

enum BannerPosition {
    homeTop
    heroAlone
    advertise
    other
}

model Order {
    id        String      @id @default(cuid())
    products  Json
    paymentId String
    status    OrderStatus @default(received)
    address   Json?
    user      User        @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

enum OrderStatus {
    received
    unpaid
    holding
    processing
    shipping
    delivered
    completed
}
